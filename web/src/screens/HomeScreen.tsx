import React, { CSSProperties } from 'react';
import { BaseButton } from '@/components/BaseButton';
import { BaseCard } from '@/components/BaseCard';
import { ProgressBar } from '@/components/ProgressBar';
import { Avatar } from '@/components/Avatar';
import { COLORS, TYPOGRAPHY, SPACING } from '@/utils/constants';

// Ê®°ÊãüÊï∞ÊçÆ
const mockUser = {
  id: '1',
  username: 'Â∞èÊòé',
  level: 5,
  experience: 120,
  experienceToNext: 200,
  streak: 7,
  gems: 150,
};

const mockDailyTasks = [
  {
    id: '1',
    title: 'ÂÆåÊàê3‰∏™ÂÖ≥Âç°',
    description: '‰ªäÊó•Â≠¶‰π†ÁõÆÊ†á',
    progress: 2,
    target: 3,
    icon: 'üéØ',
  },
  {
    id: '2',
    title: 'Ê∂àÁÅ≠20‰∏™Áü•ËØÜÁÇπ',
    description: 'ÁßØÁ¥ØÂ≠¶‰π†ÊàêÊûú',
    progress: 15,
    target: 20,
    icon: '‚ö°',
  },
];

export const HomeScreen: React.FC = () => {
  const handleAction = (action: string) => {
    alert(`${action} ÂäüËÉΩÂºÄÂèë‰∏≠...`);
  };

  const containerStyle: CSSProperties = {
    minHeight: '100vh',
    backgroundColor: COLORS.background.secondary,
    fontFamily: 'system-ui, -apple-system, sans-serif',
  };

  const headerStyle: CSSProperties = {
    height: '120px',
    background: `linear-gradient(135deg, ${COLORS.primary}, ${COLORS.primaryDark})`,
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'space-between',
    padding: `0 ${SPACING.md}px`,
    color: '#FFFFFF',
  };

  const userInfoStyle: CSSProperties = {
    display: 'flex',
    alignItems: 'center',
    flex: 1,
  };

  const userDetailsStyle: CSSProperties = {
    marginLeft: `${SPACING.md}px`,
    flex: 1,
  };

  const usernameStyle: CSSProperties = {
    ...TYPOGRAPHY.bodyBold,
    color: '#FFFFFF',
    marginBottom: `${SPACING.xs}px`,
  };

  const levelTextStyle: CSSProperties = {
    ...TYPOGRAPHY.small,
    color: 'rgba(255, 255, 255, 0.8)',
    marginBottom: `${SPACING.xs}px`,
  };

  const headerActionsStyle: CSSProperties = {
    display: 'flex',
    alignItems: 'center',
    gap: `${SPACING.sm}px`,
  };

  const statBadgeStyle: CSSProperties = {
    display: 'flex',
    alignItems: 'center',
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    padding: `${SPACING.xs}px ${SPACING.sm}px`,
    borderRadius: '16px',
    gap: `${SPACING.xs}px`,
  };

  const statTextStyle: CSSProperties = {
    ...TYPOGRAPHY.bodyBold,
    color: '#FFFFFF',
  };

  const contentStyle: CSSProperties = {
    padding: `${SPACING.md}px`,
  };

  const sectionTitleStyle: CSSProperties = {
    ...TYPOGRAPHY.title3,
    color: COLORS.text.primary,
    marginBottom: `${SPACING.md}px`,
  };

  const taskItemStyle: CSSProperties = {
    display: 'flex',
    alignItems: 'center',
    marginBottom: `${SPACING.md}px`,
  };

  const taskIconStyle: CSSProperties = {
    width: '40px',
    height: '40px',
    borderRadius: '20px',
    backgroundColor: COLORS.background.secondary,
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: `${SPACING.md}px`,
    fontSize: '20px',
  };

  const taskInfoStyle: CSSProperties = {
    flex: 1,
  };

  const taskTitleStyle: CSSProperties = {
    ...TYPOGRAPHY.bodyBold,
    color: COLORS.text.primary,
    marginBottom: `${SPACING.xs}px`,
  };

  const taskDescriptionStyle: CSSProperties = {
    ...TYPOGRAPHY.small,
    color: COLORS.text.secondary,
    marginBottom: `${SPACING.xs}px`,
  };

  const quickActionsStyle: CSSProperties = {
    display: 'grid',
    gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))',
    gap: `${SPACING.md}px`,
    marginBottom: `${SPACING.lg}px`,
  };

  const actionCardStyle: CSSProperties = {
    alignItems: 'center',
    padding: `${SPACING.lg}px`,
    textAlign: 'center',
  };

  const actionIconStyle: CSSProperties = {
    width: '50px',
    height: '50px',
    borderRadius: '25px',
    backgroundColor: COLORS.background.secondary,
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    margin: `0 auto ${SPACING.md}px`,
    fontSize: '24px',
  };

  const actionTitleStyle: CSSProperties = {
    ...TYPOGRAPHY.bodyBold,
    color: COLORS.text.primary,
    marginBottom: `${SPACING.xs}px`,
  };

  const actionSubtitleStyle: CSSProperties = {
    ...TYPOGRAPHY.small,
    color: COLORS.text.secondary,
    marginBottom: `${SPACING.md}px`,
  };

  const statsRowStyle: CSSProperties = {
    display: 'flex',
    justifyContent: 'space-around',
  };

  const statItemStyle: CSSProperties = {
    textAlign: 'center',
  };

  const statValueStyle: CSSProperties = {
    ...TYPOGRAPHY.title2,
    color: COLORS.primary,
    fontWeight: '700',
    marginBottom: `${SPACING.xs}px`,
  };

  const statLabelStyle: CSSProperties = {
    ...TYPOGRAPHY.small,
    color: COLORS.text.secondary,
  };

  return (
    <div style={containerStyle}>
      {/* È°∂ÈÉ®Áî®Êà∑‰ø°ÊÅØÂå∫Âüü */}
      <div style={headerStyle}>
        <div style={userInfoStyle}>
          <Avatar
            username={mockUser.username}
            level={mockUser.level}
            showLevel={true}
            size="medium"
          />
          <div style={userDetailsStyle}>
            <div style={usernameStyle}>{mockUser.username}</div>
            <div style={levelTextStyle}>
              Lv.{mockUser.level} ({mockUser.experience}/{mockUser.experienceToNext})
            </div>
            <ProgressBar
              progress={mockUser.experience / mockUser.experienceToNext}
              height={6}
              style={{ maxWidth: '120px' }}
            />
          </div>
        </div>
        
        <div style={headerActionsStyle}>
          <div style={statBadgeStyle}>
            <span>üî•</span>
            <span style={statTextStyle}>{mockUser.streak}</span>
          </div>
          <div style={statBadgeStyle}>
            <span>üíé</span>
            <span style={statTextStyle}>{mockUser.gems}</span>
          </div>
          <BaseButton
            title="‚öôÔ∏è"
            size="small"
            type="secondary"
            onClick={() => handleAction('ËÆæÁΩÆ')}
            style={{ width: '40px', height: '40px', padding: '0' }}
          />
        </div>
      </div>

      <div style={contentStyle}>
        {/* ÊØèÊó•‰ªªÂä°Âç°Áâá */}
        <BaseCard style={{ marginBottom: `${SPACING.lg}px` }}>
          <div style={sectionTitleStyle}>ÊØèÊó•‰ªªÂä°</div>
          {mockDailyTasks.map((task) => (
            <div key={task.id} style={taskItemStyle}>
              <div style={taskIconStyle}>
                <span>{task.icon}</span>
              </div>
              <div style={taskInfoStyle}>
                <div style={taskTitleStyle}>{task.title}</div>
                <div style={taskDescriptionStyle}>{task.description}</div>
                <ProgressBar
                  progress={task.progress / task.target}
                  current={task.progress}
                  total={task.target}
                  showText={true}
                  height={4}
                />
              </div>
              <div style={{ color: COLORS.success, fontSize: TYPOGRAPHY.small.fontSize }}>
                +10üíé
              </div>
            </div>
          ))}
        </BaseCard>

        {/* Âø´ÈÄüÂÖ•Âè£Âå∫Âüü */}
        <div style={quickActionsStyle}>
          <BaseCard style={actionCardStyle} onClick={() => handleAction('ÁªßÁª≠Â≠¶‰π†')}>
            <div style={actionIconStyle}>
              <span>‚ñ∂Ô∏è</span>
            </div>
            <div style={actionTitleStyle}>ÁªßÁª≠Â≠¶‰π†</div>
            <div style={actionSubtitleStyle}>Á¨¨3ÂÖ≥ ËøõË°å‰∏≠</div>
            <BaseButton
              title="ÂºÄÂßã"
              size="small"
              onClick={() => handleAction('ÁªßÁª≠Â≠¶‰π†')}
              style={{ width: '100%' }}
            />
          </BaseCard>

          <BaseCard style={actionCardStyle} onClick={() => handleAction('ÊØèÊó•ÊåëÊàò')}>
            <div style={actionIconStyle}>
              <span>‚ö°</span>
            </div>
            <div style={actionTitleStyle}>ÊØèÊó•ÊåëÊàò</div>
            <div style={actionSubtitleStyle}>ÈôêÊó∂Á≠îÈ¢ò</div>
            <BaseButton
              title="ÊåëÊàò"
              size="small"
              onClick={() => handleAction('ÊØèÊó•ÊåëÊàò')}
              style={{ width: '100%', backgroundColor: COLORS.warning }}
            />
          </BaseCard>

          <BaseCard style={actionCardStyle} onClick={() => handleAction('Â•ΩÂèãPK')}>
            <div style={actionIconStyle}>
              <span>‚öîÔ∏è</span>
            </div>
            <div style={actionTitleStyle}>Â•ΩÂèãPK</div>
            <div style={actionSubtitleStyle}>ÈÇÄËØ∑Â•ΩÂèã</div>
            <BaseButton
              title="ÂØπÊàò"
              size="small"
              type="secondary"
              onClick={() => handleAction('Â•ΩÂèãPK')}
              style={{ width: '100%' }}
            />
          </BaseCard>

          <BaseCard style={actionCardStyle} onClick={() => handleAction('ÊàëÁöÑÊàêÂ∞±')}>
            <div style={actionIconStyle}>
              <span>üèÜ</span>
            </div>
            <div style={actionTitleStyle}>ÊàëÁöÑÊàêÂ∞±</div>
            <div style={actionSubtitleStyle}>Êü•ÁúãÂæΩÁ´†</div>
            <BaseButton
              title="Êü•Áúã"
              size="small"
              onClick={() => handleAction('ÊàëÁöÑÊàêÂ∞±')}
              style={{ width: '100%', backgroundColor: COLORS.success }}
            />
          </BaseCard>
        </div>

        {/* Â≠¶‰π†ÁªüËÆ° */}
        <BaseCard>
          <div style={sectionTitleStyle}>‰ªäÊó•Â≠¶‰π†</div>
          <div style={statsRowStyle}>
            <div style={statItemStyle}>
              <div style={statValueStyle}>25</div>
              <div style={statLabelStyle}>ÂàÜÈíü</div>
            </div>
            <div style={statItemStyle}>
              <div style={statValueStyle}>15</div>
              <div style={statLabelStyle}>Áü•ËØÜÁÇπ</div>
            </div>
            <div style={statItemStyle}>
              <div style={statValueStyle}>92%</div>
              <div style={statLabelStyle}>Ê≠£Á°ÆÁéá</div>
            </div>
          </div>
        </BaseCard>
      </div>
    </div>
  );
};